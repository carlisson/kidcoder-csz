// Generated by CoffeeScript 1.4.0
(function() {
  var Element, Hero, InternalKeyMonitor, NovelPerson, NovelScene, Scenary, b_screen, hero, heroPerson, keyMonitor, mapHero, mapKeypress, novel, scene, screenarea, tileset, walkable,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Element = (function() {

    function Element(id) {
      this.id = id;
      this.dom = $("<div/>", {
        id: this.id
      });
    }

    Element.prototype.activate = function(mother) {
      return mother.append(this.dom);
    };

    Element.prototype.show = function() {
      return this.dom.show();
    };

    Element.prototype.hide = function() {
      return this.dom.hide();
    };

    Element.prototype.slide = function(x, y) {
      return this.dom.animate({
        translate3d: x + 'px,' + y + 'px,0'
      }, 500, 'linear');
    };

    return Element;

  })();

  InternalKeyMonitor = (function() {

    function InternalKeyMonitor() {
      this.stack = [];
    }

    InternalKeyMonitor.prototype.toLast = function() {
      /*
          console.log @stack.length
          if @stack.length > 0
            $(document).unbind 'keypress'
            console.log 'Comportamento ok'
            $(document).on 'keypress', @stack[@stack.length - 1] @stack.length > 0
      */

    };

    InternalKeyMonitor.prototype.pushState = function(f) {
      this.stack.push(f);
      return this.toLast();
    };

    InternalKeyMonitor.prototype.popState = function() {
      console.log('Voltando ao comportamento anterior');
      this.stack.pop();
      return this.toLast();
    };

    InternalKeyMonitor.prototype.clear = function() {
      return this.stack = [];
    };

    return InternalKeyMonitor;

  })();

  keyMonitor = new InternalKeyMonitor();

  tileset = {
    s: "street",
    g: "grass",
    t: "tree",
    w: "water",
    h: "house",
    l: "wall"
  };

  walkable = "sgh";

  Hero = (function(_super) {

    __extends(Hero, _super);

    function Hero(scenary) {
      this.scenary = scenary;
      this.pos = [0, 0];
      this.dom = $("<div/>", {
        id: "hero"
      });
    }

    Hero.prototype.walk = function(sc, dx, dy) {
      var ifix, pseudopos;
      ifix = sc.left ? 0 : sc.b_right;
      pseudopos = [this.pos[0] - ifix, this.pos[1]];
      this.info("pp " + pseudopos + " " + ifix + " (" + dx + ", " + dy + ") bs " + b_screen + " sa " + screenarea);
      if (dx === -1) {
        if (this.dom.hasClass('toright')) {
          this.dom.removeClass('toright');
        }
        if (this.dom.hasClass('toback')) {
          this.dom.removeClass('toback');
        }
        if (!this.dom.hasClass('toleft')) {
          this.dom.addClass('toleft');
        }
        if (this.pos[0] > 0) {
          if (walkable.indexOf(sc.map[this.pos[1]][this.pos[0] - 1]) > -1) {
            this.pos[0] -= 1;
            if (this.pos[0] - 2 < -ifix && !sc.left) {
              sc.left = true;
              sc.slide(0, 0);
              ifix = 0;
            }
          } else {
            console.log('red');
          }
        } else {
          console.log('black');
        }
      } else if (dx === 1) {
        if (this.dom.hasClass('toleft')) {
          this.dom.removeClass('toleft');
        }
        if (this.dom.hasClass('toback')) {
          this.dom.removeClass('toback');
        }
        if (!this.dom.hasClass('toright')) {
          this.dom.addClass('toright');
        }
        if (this.pos[0] < sc.map[0].length) {
          if (walkable.indexOf(sc.map[this.pos[1]][this.pos[0] + 1]) > -1) {
            this.pos[0] += 1;
            if (pseudopos[0] > 8 && sc.left) {
              sc.left = false;
              sc.slide(sc.right, 0);
              ifix = sc.b_right;
            }
          } else {
            console.log('red');
          }
        } else {
          console.log('black');
        }
      } else if (dy === -1) {
        if (this.dom.hasClass('toleft')) {
          this.dom.removeClass('toleft');
        }
        if (this.dom.hasClass('toright')) {
          this.dom.removeClass('toright');
        }
        if (!this.dom.hasClass('toback')) {
          this.dom.addClass('toback');
        }
        if (pseudopos[1] > 0) {
          if (walkable.indexOf(sc.map[this.pos[1] - 1][this.pos[0]]) > -1) {
            this.pos[1] -= 1;
          } else {
            console.log('red');
          }
        } else {
          console.log('black');
        }
      } else if (dy === 1) {
        if (this.dom.hasClass('toright')) {
          this.dom.removeClass('toright');
        }
        if (this.dom.hasClass('toleft')) {
          this.dom.removeClass('toleft');
        }
        if (this.dom.hasClass('toback')) {
          this.dom.removeClass('toback');
        }
        if (1 + pseudopos[1] < sc.map.length) {
          if (walkable.indexOf(sc.map[this.pos[1] + 1][this.pos[0]]) > -1) {
            this.pos[1] += 1;
          } else {
            console.log('red');
          }
        } else {
          console.log('black');
        }
      }
      return this.slide((this.pos[0] + ifix) * 40 + 10, this.pos[1] * 42 + 10);
    };

    Hero.prototype.info = function(msg) {
      return console.log("Hero: " + this.pos + "; " + msg);
    };

    Hero.prototype.sceneKeypress = function(scenary, key) {
      switch (key) {
        case "Up":
          return this.walk(scenary, 0, -1);
        case "Down":
          return this.walk(scenary, 0, 1);
        case "Left":
          return this.walk(scenary, -1, 0);
        case "Right":
          return this.walk(scenary, 1, 0);
      }
    };

    return Hero;

  })(Element);

  Scenary = (function(_super) {

    __extends(Scenary, _super);

    function Scenary(map) {
      var l, line, t, tile, _i, _j, _len, _len1, _ref;
      this.map = map;
      this.dom = $("<table />", {
        id: "scenario"
      });
      _ref = this.map;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        l = _ref[_i];
        line = $("<tr />");
        for (_j = 0, _len1 = l.length; _j < _len1; _j++) {
          t = l[_j];
          tile = $("<td />", {
            "class": tileset[t]
          });
          line.append(tile);
        }
        this.dom.append(line);
      }
    }

    Scenary.prototype.activate = function(mother) {
      var w;
      Scenary.__super__.activate.call(this, mother);
      this.pos = [0, 0];
      w = this.map[0].length * 40;
      this.dom.css("width", w);
      this.left = true;
      this.b_right = b_screen[0] - this.map[0].length;
      return this.right = this.b_right * 40;
    };

    return Scenary;

  })(Element);

  mapKeypress = function(k) {
    switch (k.key) {
      case "Up":
        return hero.walk(scene, 0, -1);
      case "Down":
        return hero.walk(scene, 0, 1);
      case "Left":
        return hero.walk(scene, -1, 0);
      case "Right":
        return hero.walk(scene, 1, 0);
    }
  };

  NovelPerson = (function(_super) {

    __extends(NovelPerson, _super);

    function NovelPerson(id, color) {
      this.id = id;
      this.color = color;
      NovelPerson.__super__.constructor.call(this, this.id);
      this.dom.addClass("novel-person");
      this.images = [];
    }

    NovelPerson.prototype.activate = function(mother) {
      return NovelPerson.__super__.activate.call(this, mother);
    };

    NovelPerson.prototype.addImage = function(humor, image) {
      return this.images[humor] = image;
    };

    NovelPerson.prototype.show = function(humor) {
      this.dom.css('background-image', this.images[humor]);
      return NovelPerson.__super__.show.call(this);
    };

    return NovelPerson;

  })(Element);

  NovelScene = (function(_super) {

    __extends(NovelScene, _super);

    function NovelScene(id) {
      this.id = id;
      NovelScene.__super__.constructor.call(this, this.id);
      this.dom.addClass("novel-scene");
      this.persons = {};
      this.message = new Element(this.id + "-message");
      this.message.dom.addClass("novel-message");
      this.message.hide();
    }

    NovelScene.prototype.activate = function(mother) {
      var n, person, _ref, _results;
      NovelScene.__super__.activate.call(this, mother);
      this.message.activate(mother);
      _ref = this.persons;
      _results = [];
      for (n in _ref) {
        person = _ref[n];
        _results.push(person.activate(this.dom));
      }
      return _results;
    };

    NovelScene.prototype.addPerson = function(name, p) {
      return this.persons[name] = p;
    };

    NovelScene.prototype.talk = function(name, humor, text) {
      return this.persons[name].show(humor);
    };

    NovelScene.prototype.write = function(t) {
      this.message.dom.text(t);
      this.message.show();
      return keyMonitor.pushState(this.mapKeypress);
    };

    NovelScene.prototype.choose = function() {};

    NovelScene.prototype.desactivate = function() {};

    NovelScene.prototype.mapKeypress = function(k) {
      var p, _i, _len, _ref;
      if (k.key === ' ' || 'Enter') {
        novel.message.hide();
        _ref = novel.persons;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          novel.persons[p].hide();
        }
        return keyMonitor.popState();
      }
    };

    return NovelScene;

  })(Element);

  screenarea = [640, 420];

  b_screen = [screenarea[0] / 40, screenarea[1] / 42];

  scene = new Scenary(['ggggggsggggggggggggg', 'tttttgsggggggggggggg', 'ttttttsssssssssggggg', 'tsstttsgggggggsggggg', 'ssssttsgggggghsggggg', 'ssssthsgggggwssggggg', 'sssssssggggwwwwwgwwg', 'ttggggggggwwwwwwgwww', 'ggggggggggggwwwggwww', 'gggggggggggwwwwgggww']);

  hero = new Hero(scene);

  heroPerson = new NovelPerson("hero-photo", "red");

  novel = new NovelScene("mainnovel");

  novel.addPerson("Azul", heroPerson);

  mapHero = function(k) {
    return hero.sceneKeypress(scene, k.key);
  };

  $(document).ready(function() {
    scene.activate($("#area"));
    hero.activate($("#area"));
    novel.activate($("#area"));
    return keyMonitor.pushState(mapKeypress);
  });

}).call(this);
